datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model File {
  id   String @id @unique @default(cuid())
  blob Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  image     Image?
}

model Image {
  file   File   @relation(fields: [fileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fileId String @unique

  contentType String
  altText     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User?
  horse Horse?
}

model Role {
  id   String @id @unique @default(cuid())
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       User[]
  permissions Permission[]
}

model Permission {
  id   String @id @unique @default(cuid())
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]
}

model User {
  id       String  @id @unique @default(cuid())
  email    String  @unique
  username String  @unique
  name     String?
  phone    String?

  birthdate         DateTime?
  height            Int?
  yearsOfExperience Int?
  notes             String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  image   Image?  @relation(fields: [imageId], references: [fileId])
  imageId String? @unique

  password Password?
  roles    Role[]
  session  Session[]

  lastLogin DateTime? @default(now())

  Instructor      Event[] @relation("instructor")
  cleaningCrew    Event[] @relation("cleaningCrew")
  lessonAssistant Event[] @relation("lessonAssistant")
  sideWalker      Event[] @relation("sideWalker")
  horseLeader     Event[] @relation("horseLeader")

  horseAssignments HorseAssignment[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Verification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  /// The type of verification, e.g. "email" or "phone"
  type String

  /// The thing we're trying to verify, e.g. a user's email or phone number
  target String

  /// The secret key used to generate the otp
  secret String

  /// The algorithm used to generate the otp
  algorithm String

  /// The number of digits in the otp
  digits Int

  /// The number of seconds the otp is valid for
  period Int

  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}

model Session {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  expirationDate DateTime
}

model Horse {
  id        String   @id @unique @default(cuid())
  name      String
  notes     String?
  status    String?
  updatedAt DateTime @updatedAt
  cooldown Boolean @default(false)
  cooldownStartDate DateTime?
  cooldownEndDate DateTime?

  image   Image?  @relation(fields: [imageId], references: [fileId])
  imageId String? @unique

  events          Event[]
  HorseAssignment HorseAssignment[]
}

model Event {
  id    String @id @unique @default(cuid())
  title String

  start DateTime
  end   DateTime

  instructors User[] @relation("instructor")

  cleaningCrew    User[] @relation("cleaningCrew")
  cleaningCrewReq Int    @default(0)

  lessonAssistants    User[] @relation("lessonAssistant")
  lessonAssistantsReq Int    @default(0)

  sideWalkers    User[] @relation("sideWalker")
  sideWalkersReq Int    @default(0)

  horseLeaders    User[] @relation("horseLeader")
  horseLeadersReq Int    @default(0)

  horses Horse[]

  horseAssignments HorseAssignment[]

  isPrivate Boolean @default(false)
}

model HorseAssignment {
  id        String @id @unique @default(cuid())
  event     Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  volunteer User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  horse     Horse  @relation(fields: [horseId], references: [id], onDelete: Cascade)
  eventId   String
  userId    String
  horseId   String

  @@unique([eventId, userId])
}

model SignupPassword {
  hash String @unique
}
